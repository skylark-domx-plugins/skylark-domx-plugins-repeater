{"version":3,"sources":["views/tile.js"],"names":["define","langx","browser","eventer","noder","geom","$","views","ViewBase","TileView","inherit","klassName","options","alignment","infiniteScroll","itemRendered","noItemsHTML","selectable","template","clearSelectedItems","this","$canvas","find","removeClass","getSelectedItems","selected","each","push","setSelectedItems","items","force","i","$item","l","n","self","compareItemIndex","index","compareItemSelector","is","selector","selectItem","$itm","select","undefined","thumbnail_clearSelectedItems","addClass","isArray","length","opts","infScroll","infiniteScrolling","before","helpers","$empty","$cont","data","response","center","justify","left","right","thumbnail_injectSpacers","item","action","append","remove","renderItem","$thumbnail","itemData","invalid","replace","end","start","val","indexOf","trim","substring","search","fillTemplate","subset","on","isDisabled","hasClass","$element","trigger","container","after","name","ctor"],"mappings":";;;;;;;AAAAA,QACI,sBACA,4BACA,4BACA,0BACA,yBACA,0BACA,WACA,cACD,SAASC,EAAOC,EAASC,EAASC,EAAOC,EAAMC,EAAGC,EAAOC,GAG1D,IAAIC,EAAWD,EAASE,SACtBC,UAAY,WAEZC,SACIC,UAAW,OACXC,gBAAgB,EAChBC,aAAc,KACdC,YAAa,iBACbC,YAAY,EACZC,SAAU,mHAIdC,mBAAqB,WACjBC,KAAKC,QAAQC,KAAK,iDAAiDC,YAAY,aAGnFC,iBAAmB,WACf,IAAIC,KAIJ,OAHAL,KAAKC,QAAQC,KAAK,iDAAiDI,KAAK,WACpED,EAASE,KAAKrB,EAAEc,SAEbK,GAGXG,iBAAmB,SAASC,EAAOC,GAC/B,IAEIC,EAAGC,EAAOC,EAAGC,EAFbjB,EAAaG,KAAKR,QAAQK,WAC1BkB,EAAOf,KAIX,SAASgB,IACL,GAAIF,IAAML,EAAME,GAAGM,MAEf,OADAL,EAAQ1B,EAAEc,OACH,EAEPc,IAKR,SAASI,KACLN,EAAQ1B,EAAEc,OACAmB,GAAGV,EAAME,GAAGS,WAClBC,EAAWT,EAAOH,EAAME,GAAGN,UAInC,SAASgB,EAAWC,EAAMC,IACtBA,OAAqBC,IAAXD,GAAwBA,IAEzBb,GAAwB,UAAfb,GACVkB,EAAKU,+BAGTH,EAAKI,SAAS,aAEdJ,EAAKnB,YAAY,YAgBzB,IAZKtB,EAAM8C,QAAQlB,KACfA,GAASA,IAITI,GADU,IAAVH,GAAiC,UAAfb,EACdY,EAAMmB,OACH/B,GACFY,EAAMmB,OAAS,EAAK,EAErB,EAGHjB,EAAI,EAAGA,EAAIE,EAAGF,SACQa,IAAnBf,EAAME,GAAGM,OACTL,EAAQ1B,IACR4B,EAAI,EACJd,KAAKC,QAAQC,KAAK,wCAAwCI,KAAKU,GAC3DJ,EAAMgB,OAAS,GACfP,EAAWT,EAAOH,EAAME,GAAGN,WAGxBI,EAAME,GAAGS,UAChBpB,KAAKC,QAAQC,KAAK,wCAAwCI,KAAKY,IAK3Eb,SAAU,WACN,IACIwB,EADAC,EAAY9B,KAAKR,QAAQE,eAEzBoC,IACAD,EAA6B,iBAAdC,EAA0BA,KACzC9B,KAAK+B,mBAAkB,EAAMF,KAGrCG,OAAQ,SAASC,GACb,IAIIC,EAJAzC,EAAYO,KAAKR,QAAQC,UACzB0C,EAAQnC,KAAKC,QAAQC,KAAK,4BAC1BkC,EAAOH,EAAQG,KACfC,KA+BJ,OA5BIF,EAAMP,OAAS,GACfO,EAAQjD,EAAE,2HACNO,GAA2B,SAAdA,GAObA,GALI6C,OAAU,EACVC,QAAW,EACXC,KAAQ,EACRC,MAAS,GAEgBhD,GAAcA,EAAY,UACvD0C,EAAMT,SAAS,SAAWjC,GAC1BO,KAAK0C,yBAA0B,GAE/B1C,KAAK0C,yBAA0B,EAEnCL,EAASM,KAAOR,GAEhBE,EAASO,OAAS,OAGlBR,EAAK3B,OAAS2B,EAAK3B,MAAMmB,OAAS,IAClCM,EAAShD,EAAE,8BACJ2D,OAAO7C,KAAKR,QAAQI,aAC3BuC,EAAMU,OAAOX,IAEbC,EAAMjC,KAAK,gBAAgB4C,SAGxBT,GAEXU,WAAY,SAASd,GACjB,IAAIpC,EAAaG,KAAKR,QAAQK,WAE1BkB,EAAOf,KACPgD,EAAa9D,EA+CrB,SAAsB+D,EAAUnD,GAC5B,IAAIoD,GAAU,EAEd,SAASC,IACL,IAAIC,EAAKC,EAAOC,EAEhBD,EAAQvD,EAASyD,QAAQ,MACzBH,EAAMtD,EAASyD,QAAQ,KAAMF,EAAQ,GAEjCA,GAAS,GAAKD,GAAO,GACrBE,EAAMzE,EAAM2E,KAAK1D,EAAS2D,UAAUJ,EAAQ,EAAGD,IAC/CE,OAAyB9B,IAAlByB,EAASK,GAAsBL,EAASK,GAAO,GACtDxD,EAAWA,EAAS2D,UAAU,EAAGJ,GAASC,EAAMxD,EAAS2D,UAAUL,EAAM,IAEzEF,GAAU,EAIlB,MAAQA,GAAWpD,EAAS4D,OAAO,OAAS,GACxCP,IAGJ,OAAOrD,EArEY6D,CAAa1B,EAAQ2B,OAAO3B,EAAQhB,OAAQjB,KAAKR,QAAQM,WAwC5E,OAtCAkD,EAAWZ,KAAK,YAAaH,EAAQG,KAAK3B,MAAMwB,EAAQhB,QAEpDpB,IACAmD,EAAWtB,SAAS,cACpBsB,EAAWa,GAAG,QAAS,WACf9C,EAAK+C,aAEJd,EAAWe,SAXT,aAuBHf,EAAW7C,YAvBR,YAwBHY,EAAKiD,SAASC,QAAQ,kCAAmCjB,KAZtC,UAAfnD,GACAkB,EAAKd,QAAQC,KAAK,iDAAiDI,KAAK,WACpE,IAAIgB,EAAOpC,EAAEc,MACbsB,EAAKnB,YAfV,YAgBKY,EAAKiD,SAASC,QAAQ,kCAAmC3C,KAIjE0B,EAAWtB,SApBR,YAqBHX,EAAKiD,SAASC,QAAQ,gCAAiCjB,QAQnEf,EAAQiC,UAAUrB,OAAOG,GACrBhD,KAAK0C,yBACLM,EAAWmB,MAAM,sCAGjBnE,KAAKR,QAAQG,cACbK,KAAKR,QAAQG,cACTuE,UAAWjC,EAAQiC,UACnBvB,KAAMK,EACNC,SAAUhB,EAAQ2B,OAAO3B,EAAQhB,QAClC,eAGA,KAgCX,OAAO9B,EAAY,MACfiF,KAAO,OACPC,KAAOhF","file":"../../views/tile.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/browser\",\r\n    \"skylark-utils-dom/eventer\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/geom\",\r\n    \"skylark-utils-dom/query\",\r\n    \"../views\",   \r\n    \"./ViewBase\"\r\n], function(langx, browser, eventer, noder, geom, $, views, ViewBase) {\r\n\r\n\r\n  var TileView = ViewBase.inherit({\r\n    klassName : \"TileView\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        template: '<div class=\"thumbnail repeater-thumbnail\"><img height=\"75\" src=\"{{src}}\" width=\"65\"><span>{{name}}</span></div>'\r\n    },\r\n\r\n    //ADDITIONAL METHODS\r\n    clearSelectedItems : function() {\r\n        this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').removeClass('selected');\r\n    },\r\n\r\n    getSelectedItems : function() {\r\n        var selected = [];\r\n        this.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\r\n            selected.push($(this));\r\n        });\r\n        return selected;\r\n    },\r\n\r\n    setSelectedItems : function(items, force) {\r\n        var selectable = this.options.selectable;\r\n        var self = this;\r\n        var i, $item, l, n;\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemIndex() {\r\n            if (n === items[i].index) {\r\n                $item = $(this);\r\n                return false;\r\n            } else {\r\n                n++;\r\n            }\r\n        }\r\n\r\n        //this function is necessary because lint yells when a function is in a loop\r\n        function compareItemSelector() {\r\n            $item = $(this);\r\n            if ($item.is(items[i].selector)) {\r\n                selectItem($item, items[i].selected);\r\n            }\r\n        }\r\n\r\n        function selectItem($itm, select) {\r\n            select = (select !== undefined) ? select : true;\r\n            if (select) {\r\n                if (!force && selectable !== 'multi') {\r\n                    self.thumbnail_clearSelectedItems();\r\n                }\r\n\r\n                $itm.addClass('selected');\r\n            } else {\r\n                $itm.removeClass('selected');\r\n            }\r\n        }\r\n\r\n        if (!langx.isArray(items)) {\r\n            items = [items];\r\n        }\r\n\r\n        if (force === true || selectable === 'multi') {\r\n            l = items.length;\r\n        } else if (selectable) {\r\n            l = (items.length > 0) ? 1 : 0;\r\n        } else {\r\n            l = 0;\r\n        }\r\n\r\n        for (i = 0; i < l; i++) {\r\n            if (items[i].index !== undefined) {\r\n                $item = $();\r\n                n = 0;\r\n                this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemIndex);\r\n                if ($item.length > 0) {\r\n                    selectItem($item, items[i].selected);\r\n                }\r\n\r\n            } else if (items[i].selector) {\r\n                this.$canvas.find('.repeater-thumbnail-cont .selectable').each(compareItemSelector);\r\n            }\r\n        }\r\n    },\r\n\r\n    selected: function() {\r\n        var infScroll = this.options.infiniteScroll;\r\n        var opts;\r\n        if (infScroll) {\r\n            opts = (typeof infScroll === 'object') ? infScroll : {};\r\n            this.infiniteScrolling(true, opts);\r\n        }\r\n    },\r\n    before: function(helpers) {\r\n        var alignment = this.options.alignment;\r\n        var $cont = this.$canvas.find('.repeater-thumbnail-cont');\r\n        var data = helpers.data;\r\n        var response = {};\r\n        var $empty, validAlignments;\r\n\r\n        if ($cont.length < 1) {\r\n            $cont = $('<div class=\"clearfix repeater-thumbnail-cont\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>');\r\n            if (alignment && alignment !== 'none') {\r\n                validAlignments = {\r\n                    'center': 1,\r\n                    'justify': 1,\r\n                    'left': 1,\r\n                    'right': 1\r\n                };\r\n                alignment = (validAlignments[alignment]) ? alignment : 'justify';\r\n                $cont.addClass('align-' + alignment);\r\n                this.thumbnail_injectSpacers = true;\r\n            } else {\r\n                this.thumbnail_injectSpacers = false;\r\n            }\r\n            response.item = $cont;\r\n        } else {\r\n            response.action = 'none';\r\n        }\r\n\r\n        if (data.items && data.items.length < 1) {\r\n            $empty = $('<div class=\"empty\"></div>');\r\n            $empty.append(this.options.noItemsHTML);\r\n            $cont.append($empty);\r\n        } else {\r\n            $cont.find('.empty:first').remove();\r\n        }\r\n\r\n        return response;\r\n    },\r\n    renderItem: function(helpers) {\r\n        var selectable = this.options.selectable;\r\n        var selected = 'selected';\r\n        var self = this;\r\n        var $thumbnail = $(fillTemplate(helpers.subset[helpers.index], this.options.template));\r\n\r\n        $thumbnail.data('item_data', helpers.data.items[helpers.index]);\r\n\r\n        if (selectable) {\r\n            $thumbnail.addClass('selectable');\r\n            $thumbnail.on('click', function() {\r\n                if (self.isDisabled) return;\r\n\r\n                if (!$thumbnail.hasClass(selected)) {\r\n                    if (selectable !== 'multi') {\r\n                        self.$canvas.find('.repeater-thumbnail-cont .selectable.selected').each(function() {\r\n                            var $itm = $(this);\r\n                            $itm.removeClass(selected);\r\n                            self.$element.trigger('deselected.fu.repeaterThumbnail', $itm);\r\n                        });\r\n                    }\r\n\r\n                    $thumbnail.addClass(selected);\r\n                    self.$element.trigger('selected.fu.repeaterThumbnail', $thumbnail);\r\n                } else {\r\n                    $thumbnail.removeClass(selected);\r\n                    self.$element.trigger('deselected.fu.repeaterThumbnail', $thumbnail);\r\n                }\r\n            });\r\n        }\r\n\r\n        helpers.container.append($thumbnail);\r\n        if (this.thumbnail_injectSpacers) {\r\n            $thumbnail.after('<span class=\"spacer\">&nbsp;</span>');\r\n        }\r\n\r\n        if (this.options.itemRendered) {\r\n            this.options.itemRendered({\r\n                container: helpers.container,\r\n                item: $thumbnail,\r\n                itemData: helpers.subset[helpers.index]\r\n            }, function() {});\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n  });\r\n\r\n\r\n    //ADDITIONAL METHODS\r\n    function fillTemplate(itemData, template) {\r\n        var invalid = false;\r\n\r\n        function replace() {\r\n            var end, start, val;\r\n\r\n            start = template.indexOf('{{');\r\n            end = template.indexOf('}}', start + 2);\r\n\r\n            if (start > -1 && end > -1) {\r\n                val = langx.trim(template.substring(start + 2, end));\r\n                val = (itemData[val] !== undefined) ? itemData[val] : '';\r\n                template = template.substring(0, start) + val + template.substring(end + 2);\r\n            } else {\r\n                invalid = true;\r\n            }\r\n        }\r\n\r\n        while (!invalid && template.search('{{') >= 0) {\r\n            replace(template);\r\n        }\r\n\r\n        return template;\r\n    }\r\n\r\n    return views[\"tile\"] = {\r\n        name : \"tile\",\r\n        ctor : TileView\r\n    };\r\n});"]}